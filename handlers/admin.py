import calendar
import datetime
import traceback
from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram import F
import db_requests
import models
from states.add_coach import AddCoach
from states.edit_coach import EditCoach
from states.add_direction import AddDirection
from states.add_subscription import AddSubscription
from states.change_other_settings import ChangeOtherSettings
from states.send_message_to_all_users import SendMessageToAllUsers
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from callback_factories.change_direction_status import ChangeDirectionStatus
from callback_factories.select_shedule_day import SelectScheduleDay
from bot_init import bot

router = Router()  



@router.callback_query(F.data == "admin_menu")
async def admin_menu(callback: CallbackQuery, state: FSMContext, answer=False):
    await state.set_state()
    await state.clear()
    builder = InlineKeyboardBuilder()
    builder.button(text='üîç –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞', callback_data='search_client')
    builder.button(text='üï¥ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏', callback_data='admin_teachers')
    builder.button(text='üìä –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è', callback_data='admin_directions')
    builder.button(text='ü™™ –ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã', callback_data='admin_subscriptions')
    builder.button(text='üì® –†–∞—Å—Å—ã–ª–∫–∞', callback_data='admin_send_message_to_all_users')
    builder.button(text='‚öôÔ∏è –î—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='admin_other_settings')
    builder.button(text='üë• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data='view_users')
    builder.button(text='üîô –ú–µ–Ω—é', callback_data='menu')
    builder.adjust(1)
    if answer:
        await callback.message.answer('–í—ã –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø—É–Ω–∫—Ç –º–µ–Ω—é.', reply_markup=builder.as_markup())
    else:
        await callback.message.edit_text('–í—ã –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø—É–Ω–∫—Ç –º–µ–Ω—é.', reply_markup=builder.as_markup())


@router.callback_query(F.data == "view_users")
async def view_users(callback: CallbackQuery, state: FSMContext):
    all_users = await db_requests.get_all_users()
    message_text = f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(all_users)}\n\n'
    for user in all_users:
        message_text += f'{user.first_name + " " + user.last_name} - {user.phone_number}\n'
    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –ê–¥–º–∏–Ω-–º–µ–Ω—é', callback_data='admin_menu')

    MESS_MAX_LENGTH = 4096
    if len(message_text) < MESS_MAX_LENGTH:
        await callback.message.edit_text(message_text, reply_markup=builder.as_markup())
    else:
        for x in range(0, len(message_text), MESS_MAX_LENGTH):
                    mess = message_text[x: x + MESS_MAX_LENGTH]
                    await callback.message.answer(mess, reply_markup=builder.as_markup())
    


@router.callback_query(F.data == "admin_send_message_to_all_users")
async def admin_send_message_to_all_users(callback: CallbackQuery, state: FSMContext):
    await state.set_state(SendMessageToAllUsers.text)
    message_text = '–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.'
    builder = InlineKeyboardBuilder()
    builder.button(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel_from_')
    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())


@router.message(StateFilter(SendMessageToAllUsers.text))
async def text_message_recieved(message: Message, state: FSMContext):
    await state.update_data(message_text=message.text)
    builder = InlineKeyboardBuilder()
    builder.button(text='‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å', callback_data='confirm_send_message_to_users')
    builder.button(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel_from_')
    builder.adjust(1)
    await message.answer('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ–∫—Å—Ç.\n\n–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å"\n–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, –Ω–∞–∂–º–∏—Ç–µ "‚ùå –û—Ç–º–µ–Ω–∞"\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç')
    await message.answer(message.text, reply_markup=builder.as_markup())


@router.callback_query(F.data == 'confirm_send_message_to_users', StateFilter(SendMessageToAllUsers.text))
async def confirm_send_message_to_users(callback: CallbackQuery, state: FSMContext):
    await state.set_state()
    await callback.message.delete()
    fsmdata = await state.get_data()
    message_text = fsmdata.get('message_text')
    users = await db_requests.get_all_users()
    users_count = 0
    for user in users:
        try:
            await bot.send_message(user.user_telegram_id, message_text)
            users_count += 1
        except:
            pass
    await callback.message.answer(f'{users_count} –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n*–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–∏ —Ç–æ–ª—å–∫–æ —Ç–µ –∫–ª–∏–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞.')


@router.callback_query(F.data == "admin_subscriptions")
async def admin_subscriptions(callback: CallbackQuery, answer=False):
    subscriptions_options = await db_requests.get_all_subscriptions_options()
    if subscriptions_options:
        message_text = f'–î–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤:\n'
        for i, subsctiption_option in enumerate(subscriptions_options):
            message_text += f'{i+1}) {subsctiption_option.number_of_sessions} –∑–∞–Ω—è—Ç–∏–π –∑–∞ {subsctiption_option.price} —Ä—É–±.\n'
    else:
        message_text = '–í –ë–î –Ω–µ—Ç –≤–Ω–µ—Å—ë–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤.'
    builder = InlineKeyboardBuilder()
    builder.button(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç', callback_data='add_subscription')
    builder.button(text='‚ùå –£–¥–∞–ª–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç', callback_data='delete_subscription')
    builder.button(text='üîô –ê–¥–º–∏–Ω-–º–µ–Ω—é', callback_data='admin_menu')
    builder.adjust(1)

    if answer:
        try:
            await callback.message.answer(message_text, reply_markup=builder.as_markup())
        except:
            await callback.answer(message_text, reply_markup=builder.as_markup())
    else:
        await callback.message.edit_text(message_text, reply_markup=builder.as_markup())
    

@router.callback_query(F.data == "add_subscription")
async def add_subscription_option(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AddSubscription.number_of_sessions)
    message_text = '–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç–∏–π –≤ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ.'
    builder = InlineKeyboardBuilder()
    builder.button(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel_from_')
    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())


@router.message(StateFilter(AddSubscription.number_of_sessions))
async def number_of_sessions_recieved(message: Message, state: FSMContext):
    number_of_sessions = message.text
    if not number_of_sessions.isdigit():
        await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç–∏–π —á–∏—Å–ª–æ–º (6, 8, 12 –∏ —Ç.–¥.)')
        return
    await state.update_data(number_of_sessions=number_of_sessions)
    await state.set_state(AddSubscription.subscription_cost)
    message_text = '–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞.'
    builder = InlineKeyboardBuilder()
    builder.button(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel_from_')
    await message.answer(message_text, reply_markup=builder.as_markup())


@router.message(StateFilter(AddSubscription.subscription_cost))
async def subscription_cost_recieved(message: Message, state: FSMContext):
    subscription_cost = message.text
    if not subscription_cost.isnumeric():
        await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ —á–∏—Å–ª–æ–º (1500, 1800 –∏ —Ç.–¥.)')
        return
    fsmdata = await state.get_data()
    number_of_sessions = fsmdata.get('number_of_sessions')

    add_subscription_option = await db_requests.add_subscriptions_options(number_of_sessions, subscription_cost)
    
    if add_subscription_option:
        await message.answer('–ù–æ–≤—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω', show_alert=True)
        await admin_subscriptions(message, answer=True)
    else:
        await message.answer('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞: —Ç–∞–∫–æ–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.', show_alert=True)
        await admin_subscriptions(message, answer=True)
    

@router.callback_query(F.data == "admin_teachers")
async def admin_teachers(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    coaches = await db_requests.get_coaches()
    if coaches:
        message_text = '–î–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ç—Ä–µ–Ω–µ—Ä—ã:\n\n'
        for coach in coaches:
            message_text += (f'<b>–ò–º—è:</b> {coach.first_name} {coach.last_name}\n'
                             f'<b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b> '
                             f'{", ".join(direction.name for direction in coach.directions_of_teaching) if len(coach.directions_of_teaching) > 0 else "–î–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è!"}\n'
                             f'<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è:</b> {coach.individual_lesson_price}\n'
                             f'<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è:</b> {coach.for_two_lesson_price}\n'
                             '-----------\n')
        message_text += '\n\n‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–µ—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.'
    else:
        message_text = '–î–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–µ–Ω–µ—Ä–æ–≤. –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –Ω–∞–∂–∞–≤ "–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞"'
    
    builder = InlineKeyboardBuilder()
    for coach in coaches:
        builder.button(text=f'{coach.first_name} {coach.last_name}', callback_data=f'edit_coach_{coach.id}')
    builder.button(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞', callback_data='add_coach')
    builder.button(text='üîô –ê–¥–º–∏–Ω-–º–µ–Ω—é', callback_data='admin_menu')
    builder.adjust(1)
    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())


@router.callback_query(F.data == "add_coach")
async def add_coach(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AddCoach.coach_phonenumber)
    message_text = '–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ç—Ä–µ–Ω–µ—Ä–∞.\n‚ùóÔ∏è –¢—Ä–µ–Ω–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ –ø–æ–¥ —ç—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º.'
    builder = InlineKeyboardBuilder()
    builder.button(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel_from_')
    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())


@router.message(StateFilter(AddCoach.coach_phonenumber))
async def phonenumber_recieved(message: Message, state: FSMContext):
    coach_phonenumber = message.text.replace(' ', '')

    if coach_phonenumber.startswith('9'):
        coach_phonenumber = '7' + coach_phonenumber
    elif coach_phonenumber.startswith('8'):
        coach_phonenumber = '7' + coach_phonenumber[1:]
    elif coach_phonenumber.startswith('+'):
        coach_phonenumber = coach_phonenumber[1:]    
    

    if await db_requests.get_coach_by_phonenumber(coach_phonenumber):
        await message.answer('–¢—Ä–µ–Ω–µ—Ä —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤!')
        await state.clear()
        return
    
    coach = await db_requests.get_user_by_phonenumber(coach_phonenumber)
    if coach:
        await state.clear()
        add_coach = await db_requests.add_coach(coach.phone_number, coach.first_name, coach.last_name, coach.user_telegram_id)
        builder = InlineKeyboardBuilder()
        builder.button(text='üîô –ê–¥–º–∏–Ω-–º–µ–Ω—é', callback_data='admin_menu')
        if add_coach:
            await message.answer('–¢—Ä–µ–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.', reply_markup=builder.as_markup())
        else:
            await message.answer('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞.', reply_markup=builder.as_markup())
    else:
        builder = InlineKeyboardBuilder()
        builder.button(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel_from_')
        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î. –í—ã –≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞?\n\n'
                             '–ú–æ–∂–µ—Ç –±—ã—Ç—å —Ç—Ä–µ–Ω–µ—Ä –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –≤ –±–æ—Ç–µ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å?', reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith('edit_coach_'))
async def cancel_state(callback: CallbackQuery, state: FSMContext):
    coach_id = callback.data[11:]
    coach = await db_requests.get_coach_by_id(coach_id)
    await state.update_data(coach=coach)
    
    builder = InlineKeyboardBuilder()
    builder.button(text='üí¨ –ò–º—è', callback_data=f'edit_name_coach')
    builder.button(text='üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', callback_data=f'edit_schedule_coach')
    builder.button(text='üóì –ò—Å—Ç–æ—Ä–∏—è –∑–∞–Ω—è—Ç–∏–π', callback_data=f'lessons_history_coach')
    builder.button(text='üìä –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è', callback_data=f'edit_directions_coach')
    builder.button(text='‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ', callback_data=f'edit_about_coach_{coach.id}')
    builder.button(text='‚öúÔ∏è –°—Ç–æ–∏–º. –∏–Ω–¥. –∑–∞–Ω—è—Ç–∏—è', callback_data=f'edit_individual_cost_coach_{coach.id}')
    builder.button(text='üëØ‚Äç‚ôÄÔ∏è –°—Ç–æ–∏–º. –ø–∞—Ä–Ω. –∑–∞–Ω—è—Ç–∏—è', callback_data=f'edit_cost_for_two_coach_{coach.id}')
    
    builder.button(text='üîô –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏', callback_data='admin_teachers')
    builder.adjust(1)
    await callback.message.edit_text(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç—Ä–µ–Ω–µ—Ä–∞ {coach.first_name} {coach.last_name}.\n\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?', reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith('edit_name_coach'))
async def cancel_state(callback: CallbackQuery, state: FSMContext):
    await state.set_state(EditCoach.coach_name)
    fsmdata = await state.get_data()
    coach = fsmdata.get('coach')
    
    await state.update_data(coach=coach)
    builder = InlineKeyboardBuilder()
    builder.button(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel_from_')
    await callback.message.edit_text(f'–¢–µ–∫—É—â–µ–µ –∏–º—è —Ç—Ä–µ–Ω–µ—Ä–∞: {coach.first_name} {coach.last_name}.\n–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ò–º—è –§–∞–º–∏–ª–∏—è.', reply_markup=builder.as_markup())


@router.message(StateFilter(EditCoach.coach_name))
async def coach_name_recieved(message: Message, state: FSMContext):
    fsmdata = await state.get_data()
    coach = fsmdata.get('coach')
    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –ê–¥–º–∏–Ω-–º–µ–Ω—é', callback_data='admin_menu')
    coach_first_name = message.text.split(' ')[0]
    
    try:
        coach_last_name = message.text.split(' ')[1]
    except IndexError:
        builder = InlineKeyboardBuilder()
        builder.button(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel_from_')
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –†–∞–∑–¥–µ–ª–∏—Ç–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é –ø—Ä–æ–±–µ–ª–æ–º.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.', reply_markup=builder.as_markup())
        return
    
    coach_fullname = coach_first_name + ' ' + coach_last_name
    edit_coach = await db_requests.edit_coach_by_id(coach.id, 'name', coach_fullname)

    if edit_coach:
        await message.answer(f'–ò–º—è —Ç—Ä–µ–Ω–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {coach_fullname}', reply_markup=builder.as_markup())
    else:
        await message.answer(f'–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ —Ç—Ä–µ–Ω–µ—Ä–∞.', reply_markup=builder.as_markup())
    await state.clear()


@router.callback_query(F.data == "admin_directions")
async def admin_directions(callback: CallbackQuery, answer=False):
    directions = await db_requests.get_all_directions()
    if directions:
        message_text = f'–í—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤:\n'
        for i, direction in enumerate(directions):
            message_text += f'{i+1}) {direction.name} (max {direction.maximum_students} —É—á–µ–Ω–∏–∫–æ–≤)\n'
    else:
        message_text = '–í –ë–î –Ω–µ—Ç –≤–Ω–µ—Å—ë–Ω–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π.'
    builder = InlineKeyboardBuilder()
    builder.button(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', callback_data='add_direction')
    builder.button(text='‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', callback_data='delete_direction')
    builder.button(text='üîô –ê–¥–º–∏–Ω-–º–µ–Ω—é', callback_data='admin_menu')
    builder.adjust(1)
    if answer:
        await callback.answer(message_text, reply_markup=builder.as_markup())
    else:
        await callback.message.edit_text(message_text, reply_markup=builder.as_markup())


@router.callback_query(F.data == "delete_subscription")
async def delete_subscription(callback: CallbackQuery, state: FSMContext):
    builder = InlineKeyboardBuilder()
    subscriptions_options = await db_requests.get_all_subscriptions_options()
    for subscription_option in subscriptions_options:
        builder.button(text=f'{subscription_option.number_of_sessions} / {subscription_option.price}', callback_data=f'confirm_delete_subscription_{subscription_option.id}')
    builder.button(text='üîô –ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã', callback_data='admin_subscriptions')
    builder.adjust(1)
    message_text = '–í—ã–±–µ—Ä–∏—Ç–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.'
    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith("confirm_delete_subscription_"))
async def confirm_delete_subscription(callback: CallbackQuery, state: FSMContext):
    subscription_id = callback.data[28:]
    delete_subscription = await db_requests.delete_subscription(subscription_id)
    if delete_subscription:
        await callback.message.answer('‚úÖ –ê–±–æ–Ω–µ–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.')
    else:
        await callback.message.answer('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞.')
    await admin_subscriptions(callback, answer=True)


@router.callback_query(F.data == "delete_direction")
async def delete_direction(callback: CallbackQuery, state: FSMContext, answer=False):
    builder = InlineKeyboardBuilder()
    directions = await db_requests.get_all_directions()
    if directions:
        message_text = f'‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è\n\n‚ùóÔ∏è <b>–ü–†–ï–ñ–î–ï –ß–ï–ú –£–î–ê–õ–ò–¢–¨ –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï, –£–ë–ï–î–ò–¢–ï–°–¨, –ß–¢–û –ü–û –≠–¢–û–ú–£ –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Æ –ù–ï–¢ –ó–ê–ü–õ–ê–ù–ò–†–û–í–ê–ù–ù–´–• –¢–†–ï–ù–ò–†–û–í–û–ö!</b>'
    else:
        message_text = '–í –ë–î –Ω–µ—Ç –≤–Ω–µ—Å—ë–Ω–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π.'
    for direction in directions:
        builder.button(text=f'{direction.name}', callback_data=f'confirm_delete_direction_{direction.id}')
    builder.button(text='üîô –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è', callback_data='admin_directions')
    builder.adjust(1)
    if answer:
        await callback.message.answer(message_text, reply_markup=builder.as_markup())
    else:
        await callback.message.edit_text(message_text, reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith("confirm_delete_direction_"))
async def confirm_delete_direction(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    direction_id = callback.data[25:]
    direction = await db_requests.get_direction_by_id(direction_id)
    if direction.name in ['–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ', '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –ø–∞—Ä–Ω–æ–µ']:
        await callback.message.answer(f'‚ùå –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {direction.name} –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å!')
        await delete_direction(callback, state, answer=True)
        return
    delete_direction_status = await db_requests.delete_direction(direction_id)

    if delete_direction_status:
        await callback.message.answer(f'‚úÖ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ "{direction.name}" —É–¥–∞–ª–µ–Ω–æ.')
    else:
        await callback.message.answer(f'‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è "{direction.name}"!')

    await delete_direction(callback, state, answer=True)


@router.callback_query(F.data == "add_direction")
async def add_direction(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AddDirection.direction_name)
    builder = InlineKeyboardBuilder()
    builder.button(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel_from_')
    bot_message = await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.', reply_markup=builder.as_markup())
    await state.update_data(bot_message=bot_message)


@router.message(StateFilter(AddDirection.direction_name))
async def direction_name_recieved(message: Message, state: FSMContext):
    direction_name = message.text
    fsmdata = await state.get_data()
    bot_message = fsmdata.get('bot_message')
    await bot_message.edit_reply_markup(answer_markup='')

    if not await db_requests.get_direction_by_name(direction_name):
        await state.set_state(AddDirection.max_students)    
        builder = InlineKeyboardBuilder()
        builder.button(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel_from_')
        bot_message = await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –ø–æ –¥–∞–Ω–Ω–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é.', reply_markup=builder.as_markup())
        await state.update_data(direction_name=direction_name, bot_message=bot_message)
        
    else:
        await message.answer('‚ùå –¢–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î')
        await state.clear()
        await admin_directions(message, answer=True)


@router.message(StateFilter(AddDirection.max_students))
async def max_students_recieved(message: Message, state: FSMContext):
    fsmdata = await state.get_data()
    bot_message = fsmdata.get('bot_message')
    direction_name = fsmdata.get('direction_name')
    
    if message.text.isdigit():
        max_students = message.text
    await bot_message.edit_reply_markup(answer_markup='')
    
    add_direction = await db_requests.add_direction(direction_name, max_students)
    if add_direction:
        await message.answer('‚úÖ –ù–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ')
    else:
        await message.answer('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è')
    
    await state.clear()
    await admin_directions(message, answer=True)


@router.callback_query(F.data.startswith('edit_directions_coach'))
async def edit_directions_coach(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    fsmdata = await state.get_data()
    coach = fsmdata.get('coach')
    directions = await db_requests.get_all_directions()
    builder = InlineKeyboardBuilder()
    directions_of_teaching_name = [direction.name for direction in coach.directions_of_teaching]
    
    for direction in directions:
        if direction.name in directions_of_teaching_name:
            builder.button(text=f'‚úÖ {direction.name}', callback_data=ChangeDirectionStatus(coach_id=coach.id, status='deactivate', direction_id=direction.id))
        else:
            builder.button(text=f'{direction.name}', callback_data=ChangeDirectionStatus(coach_id=coach.id, status='activate', direction_id=direction.id))
    builder.button(text=f'üîô {coach.first_name} {coach.last_name}', callback_data=f'edit_coach_{coach.id}')
    builder.adjust(1)

    await callback.message.edit_text('–í–∫–ª—é—á–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—Ä–µ–Ω–µ—Ä—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.\n\n‚úÖ - –∑–Ω–∞—á–∏—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞ –≤–∫–ª—é—á–µ–Ω–æ.', reply_markup=builder.as_markup())


@router.callback_query(ChangeDirectionStatus.filter())
async def change_direction_status(callback: CallbackQuery, callback_data: ChangeDirectionStatus, state: FSMContext):
    coach_id = callback_data.coach_id
    direction_status = callback_data.status
    direction_id = callback_data.direction_id
    await db_requests.change_direction_status_for_coach(coach_id, direction_id, True if direction_status == 'activate' else False)
    builder = InlineKeyboardBuilder()

    coach = await db_requests.get_coach_by_id(coach_id)
    directions = await db_requests.get_all_directions()

    directions_of_teaching_name = [direction.name for direction in coach.directions_of_teaching]
    
    for direction in directions:
        if direction.name in directions_of_teaching_name:
            builder.button(text=f'‚úÖ {direction.name}', callback_data=ChangeDirectionStatus(coach_id=coach_id, status='deactivate', direction_id=direction.id))
        else:
            builder.button(text=f'{direction.name}', callback_data=ChangeDirectionStatus(coach_id=coach_id, status='activate', direction_id=direction.id))
    builder.button(text=f'üîô {coach.first_name} {coach.last_name}', callback_data=f'edit_coach_{coach.id}')
    builder.adjust(1)
        
    await callback.message.edit_text('–í–∫–ª—é—á–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—Ä–µ–Ω–µ—Ä—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.\n\n‚úÖ - –∑–Ω–∞—á–∏—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞ –≤–∫–ª—é—á–µ–Ω–æ.', reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith('lessons_history_coach'))
async def edit_schedule_coach(callback: CallbackQuery, state: FSMContext):
    fsmdata = await state.get_data()
    coach = fsmdata.get('coach')

    coach_trainings = await db_requests.get_trainings_by_coach(coach.id, datetime.datetime.utcnow() - datetime.timedelta(days=60, hours=7), datetime.datetime.utcnow() + datetime.timedelta(hours=7))
    if coach_trainings:
        message_text = f'–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è {coach.first_name} {coach.last_name} –∑–∞ 60 –¥–Ω–µ–π.\n\n'
        for training in coach_trainings:
            number_of_students = len(await db_requests.get_training_enrollments(training.id))
            message_text += f'{datetime.datetime.strftime(training.training_date, "%d.%m.%Y %H:%M")} - {training.direction_of_training}. –£—á–µ–Ω–∏–∫–æ–≤ - {number_of_students}\n'
    else:
        message_text = f'–î–ª—è {coach.first_name} {coach.last_name} –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.\n\n'
    builder = InlineKeyboardBuilder()
    builder.button(text=f'üîô –ù–∞–∑–∞–¥', callback_data=f'edit_coach_{coach.id}')
    builder.adjust(1)
    MESS_MAX_LENGTH = 4096
    if len(message_text) < MESS_MAX_LENGTH:
        await callback.message.edit_text(message_text, reply_markup=builder.as_markup())
    else:
        for x in range(0, len(message_text), MESS_MAX_LENGTH):
                    mess = message_text[x: x + MESS_MAX_LENGTH]
                    await callback.message.answer(mess)


@router.callback_query(F.data.startswith('edit_schedule_coach'))
async def edit_schedule_coach(callback: CallbackQuery, state: FSMContext):
    current_date = datetime.datetime.utcnow()
    month_number = current_date.month
    next_month_number = (current_date + datetime.timedelta(weeks=4)).month
    after_two_month_number = (current_date + datetime.timedelta(days=60)).month
    month_names = [
        "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å",
        "–ú–∞–π", "–ò—é–Ω—å", "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç",
        "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
        ]
    current_month_name = month_names[month_number - 1]
    next_month_name = month_names[next_month_number - 1]
    after_two_month_name = month_names[after_two_month_number - 1]
    fsmdata = await state.get_data()
    coach = fsmdata.get('coach')

    coach_trainings = await db_requests.get_trainings_by_coach(coach.id, datetime.datetime.utcnow() + datetime.timedelta(hours=7), datetime.datetime.utcnow() + datetime.timedelta(days=100))
    if coach_trainings:
        message_text = f'–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è {coach.first_name} {coach.last_name}\n\n'
        for training in coach_trainings:
            number_of_students = len(await db_requests.get_training_enrollments(training.id))
            message_text += f'{datetime.datetime.strftime(training.training_date, "%d.%m.%y %H:%M")} - {training.direction_of_training}. ({number_of_students})\n'
    else:
        message_text = f'–î–ª—è {coach.first_name} {coach.last_name} –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –°–æ–∑–¥–∞–π—Ç–µ –∏—Ö!\n\n'
    builder = InlineKeyboardBuilder()
    builder.button(text=f'{current_month_name}', callback_data=f'set_shchedule_month_{month_number}')
    builder.button(text=f'{next_month_name}', callback_data=f'set_shchedule_month_{next_month_number}')
    builder.button(text=f'{after_two_month_name}', callback_data=f'set_shchedule_month_{after_two_month_number}')
    builder.button(text=f'üîô –ù–∞–∑–∞–¥', callback_data=f'edit_coach_{coach.id}')
    builder.adjust(1)
    MESS_MAX_LENGTH = 4096
    if len(message_text) < MESS_MAX_LENGTH:
        await callback.message.edit_text(message_text, reply_markup=builder.as_markup())
    else:
        for x in range(0, len(message_text), MESS_MAX_LENGTH):
                    mess = message_text[x: x + MESS_MAX_LENGTH]
                    await callback.message.answer(mess)


@router.callback_query(F.data.startswith('set_shchedule_month_'))
async def set_shchedule_month(callback: CallbackQuery, state: FSMContext):
    month_number = int(callback.data[20:])
    current_date = datetime.datetime.utcnow()
    fsmdata = await state.get_data()
    coach = fsmdata.get('coach')
    days = ["–ø–Ω", "–≤—Ç", "—Å—Ä", "—á—Ç", "–ø—Ç", "—Å–±", "–≤—Å"]
    builder = InlineKeyboardBuilder()
    for i in range(1, calendar.monthrange(current_date.year, month_number)[1] + 1):
        local_now = datetime.datetime.utcnow() + datetime.timedelta(hours=7)
        year = datetime.datetime.utcnow().year if month_number >= datetime.datetime.utcnow().month else datetime.datetime.utcnow().year + 1
        available_trainings = await db_requests.get_all_available_trainings(date_from=datetime.datetime(year, month_number, i, 00, 00), date_to=datetime.datetime(year, month_number, i, 23, 59))
        if i < local_now.day and local_now.month == month_number:
            continue
        builder.button(text=f'{"‚úÖ " if available_trainings else ""}{i}.{month_number} ({days[datetime.datetime(current_date.year, month_number, i).weekday()]})', callback_data=f'set_schedule_day_{i}.{month_number}.{current_date.year}')

    builder.button(text=f'üîô –ù–∞–∑–∞–¥', callback_data='edit_schedule_coach')
    builder.adjust(3)
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è', reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith('set_schedule_day_'))
async def set_shchedule_month(callback: CallbackQuery, state: FSMContext):
    select_date = callback.data[17:].split('.')
    select_day, select_month, select_year = int(select_date[0]), int(select_date[1]), int(select_date[2])
    await state.update_data(select_day=select_day, select_month=select_month, select_year=select_year)
    
    builder = InlineKeyboardBuilder()
    for i in range(10, 22):
        available_trainings = await db_requests.get_all_available_trainings(date_from=datetime.datetime(select_year, select_month, select_day, i, 00), date_to=datetime.datetime(select_year, select_month, select_day, i, 00))
        builder.button(text=f'{"‚úÖ " if available_trainings else ""}{i}:00', callback_data=f'set_schedule_direction_{i}')
    builder.button(text=f'üîô –ù–∞–∑–∞–¥', callback_data=f'set_shchedule_month_{select_month}')
    builder.adjust(3)
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.', reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith('set_schedule_direction_'))
async def set_shchedule_month(callback: CallbackQuery, state: FSMContext):
    select_hour = callback.data[23:]
    await state.update_data(select_hour=select_hour)
    fsmdata = await state.get_data()
    coach = fsmdata.get('coach')
    training_date = datetime.datetime(int(fsmdata.get("select_year")), int(fsmdata.get("select_month")), int(fsmdata.get("select_day")), int(select_hour), 0)
    directions_list = coach.directions_of_teaching
    
    builder = InlineKeyboardBuilder()
    for direction in directions_list:
        training = await db_requests.get_training(coach.id, direction.id, training_date)
        builder.button(text=f'{"‚úÖ " if training else ""}{direction.name}', callback_data=f'set_schedule_training_{direction.id}')
    builder.button(text=f'üîô –ù–∞–∑–∞–¥', callback_data=f'set_schedule_day_{fsmdata.get("select_day")}.{fsmdata.get("select_month")}.{fsmdata.get("select_year")}')
    builder.adjust(1)

    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏', reply_markup=builder.as_markup())
    
    
@router.callback_query(F.data.startswith('set_schedule_training_'))
async def set_shchedule_month(callback: CallbackQuery, state: FSMContext):
    direction_id = callback.data[22:]
    direction = await db_requests.get_direction_by_id(direction_id)
    fsmdata = await state.get_data()
    select_day, select_month, select_year, select_hour = fsmdata.get('select_day'), fsmdata.get('select_month'), fsmdata.get('select_year'), fsmdata.get('select_hour')
    coach = fsmdata.get('coach')
    training_date = datetime.datetime(int(select_year), int(select_month), int(select_day), int(select_hour), 0)
    builder = InlineKeyboardBuilder()
    training = await db_requests.get_training(coach.id, direction.id, training_date)
    
    if training:
        user_enrollments = await db_requests.get_training_enrollments(training.id)
        for user_enrollment in user_enrollments:
            client = await db_requests.get_user_by_id(user_enrollment.user_id)
            delete_enrollment = await db_requests.unenroll_training(client.user_telegram_id, training.id)
            message_text = ('‚ö†Ô∏è –í–∞—à–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞:\n'
                            f'{datetime.datetime.strftime(training.training_date, "%d.%m.%Y %H:%M")} - {training.direction_of_training} —É —Ç—Ä–µ–Ω–µ—Ä–∞ {training.trainer.first_name} {training.trainer.last_name}\n'
                            '<b>–û—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.</b>')
            try:
                await bot.send_message(client.user_telegram_id, message_text)
            except:
                print(traceback.format_exc())

        delete_training = await db_requests.delete_training(coach.id, direction_id, training_date)
        
    else:
        add_training = await db_requests.add_training(coach.id, direction_id, training_date)
    
    directions_list = coach.directions_of_teaching
    
    builder = InlineKeyboardBuilder()
    for direction in directions_list:
        training = await db_requests.get_training(coach.id, direction.id, training_date)
        builder.button(text=f'{"‚úÖ " if training else ""}{direction.name}', callback_data=f'set_schedule_training_{direction.id}')
    builder.button(text=f'üîô –ù–∞–∑–∞–¥', callback_data=f'set_schedule_day_{fsmdata.get("select_day")}.{fsmdata.get("select_month")}.{fsmdata.get("select_year")}')
    builder.adjust(1)

    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏', reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith('edit_individual_cost_coach_'))
async def edit_individual_cost_coach(callback: CallbackQuery, state: FSMContext):
    coach_id = callback.data[27:]  
    coach = await db_requests.get_coach_by_id(coach_id)
    await state.update_data(coach=coach)
    await state.set_state(EditCoach.edit_coach_individual_cost)
    builder = InlineKeyboardBuilder()
    builder.button(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel_from_')
    await callback.message.edit_text(f'–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞.\n–¢–µ–∫—É—â–∞—è: {coach.individual_lesson_price} —Ä.', reply_markup=builder.as_markup())


@router.message(StateFilter(EditCoach.edit_coach_individual_cost))
async def coach_individual_cost_recieved(message: Message, state: FSMContext):
    if message.text.isnumeric():
        new_cost = message.text
    else:
        builder = InlineKeyboardBuilder()
        builder.button(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel_from_')
        await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ —á–∏—Å–ª–æ', reply_markup=builder.as_markup())
        return
    fsmdata = await state.get_data()
    coach = fsmdata.get('coach')
    edit_coach_status = await db_requests.edit_coach_by_id(coach.id, 'individual_lesson_price', new_cost)
    builder = InlineKeyboardBuilder()
    builder.button(text=f'üîô {coach.first_name + " " + coach.last_name}', callback_data=f'edit_coach_{coach.id}')
    if edit_coach_status:
        await message.answer(f'‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è —É —Ç—Ä–µ–Ω–µ—Ä–∞ {coach.first_name + " " + coach.last_name} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_cost}.', reply_markup=builder.as_markup())
    else:
        await message.answer(f'‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞.', reply_markup=builder.as_markup())
    await state.set_state()
        

@router.callback_query(F.data.startswith('edit_cost_for_two_coach_'))
async def edit_individual_cost_coach(callback: CallbackQuery, state: FSMContext):
    coach_id = callback.data[24:]  
    coach = await db_requests.get_coach_by_id(coach_id)
    await state.update_data(coach=coach)
    await state.set_state(EditCoach.edit_coach_cost_for_two)
    builder = InlineKeyboardBuilder()
    builder.button(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel_from_')
    await callback.message.edit_text(f'–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞.\n–¢–µ–∫—É—â–∞—è: {coach.for_two_lesson_price} —Ä.', reply_markup=builder.as_markup())


@router.message(StateFilter(EditCoach.edit_coach_cost_for_two))
async def coach_individual_cost_recieved(message: Message, state: FSMContext):
    if message.text.isnumeric():
        new_cost = message.text
    else:
        builder = InlineKeyboardBuilder()
        builder.button(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel_from_')
        await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ —á–∏—Å–ª–æ', reply_markup=builder.as_markup())
        return
    fsmdata = await state.get_data()
    coach = fsmdata.get('coach')
    edit_coach_status = await db_requests.edit_coach_by_id(coach.id, 'for_two_lesson_price', new_cost)
    builder = InlineKeyboardBuilder()
    builder.button(text=f'üîô {coach.first_name + " " + coach.last_name}', callback_data=f'edit_coach_{coach.id}')
    if edit_coach_status:
        await message.answer(f'‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è —É —Ç—Ä–µ–Ω–µ—Ä–∞ {coach.first_name + " " + coach.last_name} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_cost}.', reply_markup=builder.as_markup())
    else:
        await message.answer(f'‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞.', reply_markup=builder.as_markup())
    await state.set_state()


@router.callback_query(F.data == "admin_other_settings")
async def add_subscription_option(callback: CallbackQuery, state: FSMContext):
    other_settings = await db_requests.get_other_settings()
    message_text = (f'–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è: {other_settings.single_lesson_cost} —Ä.\n\n'
                    f'–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è –ø—Ä–∏ –¥–æ–∫—É–ø–∫–∏ –≤ –∞–±–æ–Ω–µ–º–µ–Ω—Ç: {other_settings.add_session_to_subscribe} —Ä.\n\n'
                    f'–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–±–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è: {other_settings.trial_lesson_cost} —Ä.\n\n'
                    f'–°–∫–∏–¥–∫–∞ –Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞: {other_settings.renewal_discount}%\n\n'
                    f'–°—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã —à–∫–æ–ª—ã:\n1 —á–∞—Å - {other_settings.one_hour_rent} —Ä.\n2 —á–∞—Å–∞ - {other_settings.two_hour_rent} —Ä.')
    builder = InlineKeyboardBuilder()
    builder.button(text='–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è', callback_data='change_single_lesson_cost')
    builder.button(text='–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–∫—É–ø–∫–∏ –∑–∞–Ω—è—Ç–∏—è', callback_data='change_add_one_lesson_in_subscribe_cost')
    builder.button(text='–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–±–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è', callback_data='change_cost_trial_lesson')
    builder.button(text='–°–∫–∏–¥–∫–∞ –Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ', callback_data='change_discount')
    builder.button(text='–°—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã —à–∫–æ–ª—ã', callback_data='change_rent_cost')
    builder.button(text='üîô –ê–¥–º–∏–Ω-–º–µ–Ω—é', callback_data='admin_menu')
    builder.adjust(1)
    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())


@router.callback_query(F.data == "change_add_one_lesson_in_subscribe_cost")
async def change_add_one_lesson_in_subscribe_cost(callback: CallbackQuery, state: FSMContext):
    await state.set_state(ChangeOtherSettings.add_session_to_subscribe)
    message_text = '–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –µ–≥–æ –≤ –∞–±–æ–Ω–µ–º–µ–Ω—Ç.'
    builder = InlineKeyboardBuilder()
    builder.button(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel_from_')
    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())


@router.message(StateFilter(ChangeOtherSettings.add_session_to_subscribe))
async def new_cost_single_lesson_recieved(message: Message, state: FSMContext):
    new_cost = message.text
    if not new_cost.isdigit():
        await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —á–∏—Å–ª–æ–º (250, 300, 500 –∏ —Ç.–¥.)')
        return
    await state.set_state()
    settings_changed = await db_requests.change_other_settings('add_session_to_subscribe', new_cost)
    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –î—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='admin_other_settings')
    if settings_changed:
        await message.answer('‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞', reply_markup=builder.as_markup())
    else:
        await message.answer('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏', reply_markup=builder.as_markup())






@router.callback_query(F.data == "change_single_lesson_cost")
async def change_single_lesson_cost(callback: CallbackQuery, state: FSMContext):
    await state.set_state(ChangeOtherSettings.single_lesson_cost)
    message_text = '–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è.'
    builder = InlineKeyboardBuilder()
    builder.button(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel_from_')
    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())


@router.message(StateFilter(ChangeOtherSettings.single_lesson_cost))
async def new_cost_single_lesson_recieved(message: Message, state: FSMContext):
    new_cost = message.text
    if not new_cost.isdigit():
        await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —á–∏—Å–ª–æ–º (250, 300, 500 –∏ —Ç.–¥.)')
        return
    await state.set_state()
    settings_changed = await db_requests.change_other_settings('single_lesson_cost', new_cost)
    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –î—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='admin_other_settings')
    if settings_changed:
        await message.answer('‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞', reply_markup=builder.as_markup())
    else:
        await message.answer('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏', reply_markup=builder.as_markup())


@router.callback_query(F.data == "change_cost_trial_lesson")
async def add_subscription_option(callback: CallbackQuery, state: FSMContext):
    await state.set_state(ChangeOtherSettings.trial_lesson_cost)
    message_text = '–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–±–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è.'
    builder = InlineKeyboardBuilder()
    builder.button(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel_from_')
    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())


@router.message(StateFilter(ChangeOtherSettings.trial_lesson_cost))
async def new_cost_trial_lesson_recieved(message: Message, state: FSMContext):
    new_cost = message.text
    if not new_cost.isdigit():
        await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —á–∏—Å–ª–æ–º (250, 300, 500 –∏ —Ç.–¥.)')
        return
    await state.set_state()
    settings_changed = await db_requests.change_other_settings('trial_lesson_cost', new_cost)
    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –î—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='admin_other_settings')
    if settings_changed:
        await message.answer('‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞', reply_markup=builder.as_markup())
    else:
        await message.answer('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏', reply_markup=builder.as_markup())


@router.callback_query(F.data == "change_discount")
async def add_subscription_option(callback: CallbackQuery, state: FSMContext):
    await state.set_state(ChangeOtherSettings.renewal_discount)
    message_text = '–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ –Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞. –ò–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ 0 (–Ω–æ–ª—å) –µ—Å–ª–∏ —Å–∫–∏–¥–∫—É –∑–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –Ω—É–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å.'
    builder = InlineKeyboardBuilder()
    builder.button(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel_from_')
    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())


@router.message(StateFilter(ChangeOtherSettings.renewal_discount))
async def new_cost_trial_lesson_recieved(message: Message, state: FSMContext):
    new_cost = message.text
    if not new_cost.isdigit():
        await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫–∏–¥–∫—É –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞ –æ—Ç 0 –¥–æ 99')
        return
    if not 0 <= int(new_cost) <= 99:
        await message.answer('–°–∫–∏–¥–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 0 –∏ –±–æ–ª—å—à–µ 99')
        return
    await state.set_state()
    settings_changed = await db_requests.change_other_settings('renewal_discount', new_cost)
    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –î—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='admin_other_settings')
    if settings_changed:
        await message.answer('‚úÖ –°–∫–∏–¥–∫–∞ –∑–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞.', reply_markup=builder.as_markup())
    else:
        await message.answer('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏.', reply_markup=builder.as_markup())


@router.callback_query(F.data == "change_rent_cost")
async def add_subscription_option(callback: CallbackQuery, state: FSMContext):
    await state.set_state(ChangeOtherSettings.one_hour_rent)
    message_text = '–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —á–∞—Å–∞ –∞—Ä–µ–Ω–¥—ã —à–∫–æ–ª—ã'
    builder = InlineKeyboardBuilder()
    builder.button(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel_from_')
    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())


@router.message(StateFilter(ChangeOtherSettings.one_hour_rent))
async def new_cost_trial_lesson_recieved(message: Message, state: FSMContext):
    new_cost = message.text
    if not new_cost.isdigit():
        await message.answer('–ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.')
        return
    settings_changed = await db_requests.change_other_settings('one_hour_rent', new_cost)
    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –î—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='admin_other_settings')
    if settings_changed:
        await state.set_state(ChangeOtherSettings.two_hour_rent)
        builder = InlineKeyboardBuilder()
        builder.button(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel_from_')
        await message.answer('‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å 1 —á–∞—Å–∞ –∞—Ä–µ–Ω–¥—ã —à–∫–æ–ª—ã –∏–∑–º–µ–Ω–µ–Ω–∞.\n\n–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–≤—É—Ö —á–∞—Å–æ–≤ –∞—Ä–µ–Ω–¥—ã, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞", –µ—Å–ª–∏ –Ω–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –µ—ë –º–µ–Ω—è—Ç—å.', reply_markup=builder.as_markup())
    else:
        await state.set_state()
        await message.answer('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞—Ä–µ–Ω–¥—ã —à–∫–æ–ª—ã.', reply_markup=builder.as_markup())


@router.message(StateFilter(ChangeOtherSettings.two_hour_rent))
async def new_cost_trial_lesson_recieved(message: Message, state: FSMContext):
    new_cost = message.text
    if not new_cost.isdigit():
        await message.answer('–ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.')
        return
    await state.set_state()
    settings_changed = await db_requests.change_other_settings('two_hour_rent', new_cost)
    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –î—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='admin_other_settings')
    if settings_changed:
        await message.answer('‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å 2-—Ö —á–∞—Å–æ–≤ –∞—Ä–µ–Ω–¥—ã –∏–∑–º–µ–Ω–µ–Ω–∞.', reply_markup=builder.as_markup())
    else:
        await message.answer('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏.', reply_markup=builder.as_markup())