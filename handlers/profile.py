import asyncio
import traceback
import uuid
from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram import F
import db_requests
import models
import datetime
from yookassa import Payment
from states.edit_subscription import UserEditSelfSubscription
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from bot_init import bot

router = Router()  



@router.callback_query(F.data == "profile")
async def profile(callback: CallbackQuery):
    client = await db_requests.get_user(callback.from_user.id)
    actual_subscription: models.Subscription = await db_requests.get_actual_subscription(callback.from_user.id)
    all_actual_subscriptions = models.Subscription = await db_requests.get_all_actual_user_subscriptions(callback.from_user.id)
    other_settings = await db_requests.get_other_settings()
    builder = InlineKeyboardBuilder()
    builder.button(text='üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ', callback_data='sign_up_lesson')
    builder.button(text='üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–∏—Ö –∑–∞–Ω—è—Ç–∏–π', callback_data='my_lesson_schedule')
    if not actual_subscription:
        builder.button(text='üëØ‚Äç‚ôÄÔ∏è –ö—É–ø–∏—Ç—å –æ–¥–Ω–æ –≥—Ä—É–ø–ø–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ', callback_data='buy_one_group_lesson')
    builder.button(text='‚öúÔ∏è –ö—É–ø–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ', callback_data='buy_individual_lesson')
    #builder.button(text='üëØ‚Äç‚ôÄÔ∏è –ö—É–ø–∏—Ç—å –ø–∞—Ä–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ', callback_data='buy_individual_dual_lesson')
    if actual_subscription:
        builder.button(text='‚ûï –î–æ–∫—É–ø–∏—Ç—å –∑–∞–Ω—è—Ç–∏—è –≤ –∞–±–æ–Ω–µ–º–µ–Ω—Ç', callback_data='buy_additional_sessions')
        if other_settings.renewal_discount > 0:
            builder.button(text=f'üíµ –ü—Ä–æ–¥–ª–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç (-{other_settings.renewal_discount}%)', callback_data='renew_subscription')
        else:
            builder.button(text=f'üíµ –ü—Ä–æ–¥–ª–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç', callback_data='renew_subscription')
    else:
        builder.button(text='üíµ –ö—É–ø–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç', callback_data='buy_subscription')
    builder.button(text='üìî –ò—Å—Ç–æ—Ä–∏—è –∑–∞–Ω—è—Ç–∏–π', callback_data='history_of_lessons')
    builder.button(text='üîô –ú–µ–Ω—é', callback_data='menu')
    builder.adjust(1)
    
    if actual_subscription:
        message_text = (f'ü™™ –ê–±–æ–Ω–µ–º–µ–Ω—Ç –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {datetime.datetime.strftime(actual_subscription.expiration_date, "%d.%m.%Y")}\n'
                        f'–í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π –ø–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—É: {actual_subscription.number_of_sessions}\n'
                        f'–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–Ω—è—Ç–∏–π –ø–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—É: {len(await db_requests.get_user_enrollments(user_telegram_id=callback.from_user.id, date_from=datetime.datetime.utcnow() + datetime.timedelta(hours=7), date_to=actual_subscription.expiration_date + datetime.timedelta(days=1), without_individual=True))}\n'
                        f'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–∞–Ω—è—Ç–∏–π –ø–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—É: {len(await db_requests.get_user_enrollments(user_telegram_id=callback.from_user.id, date_from=actual_subscription.purchase_date, date_to=datetime.datetime.utcnow() + datetime.timedelta(hours=7), without_individual=True))}\n')
        if len(all_actual_subscriptions) > 1:
            message_text += '\n–¢–∞–∫–∂–µ –∫—É–ø–ª–µ–Ω(—ã) –∞–±–æ–Ω–µ–º–µ–Ω—Ç(—ã):\n'
            for i, actual_subscription in enumerate(all_actual_subscriptions[1:]):
                message_text += f'{i + 1}) {actual_subscription.number_of_sessions} –∑–∞–Ω—è—Ç–∏–π, —Å {datetime.datetime.strftime(actual_subscription.purchase_date, "%d.%m.%Y")} - {datetime.datetime.strftime(actual_subscription.expiration_date, "%d.%m.%Y")}\n'
    else:
        message_text = '‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö –∑–∞–Ω—è—Ç–∏–π –∏–ª–∏ –∫—É–ø–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º.'

    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())


@router.callback_query(F.data == "buy_additional_sessions")
async def buy_additional_sessions(callback: CallbackQuery, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.button(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel_from_user_menu')
    message_text = '–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç–∏–π, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–∫—É–ø–∏—Ç—å –≤ —Ç–µ–∫—É—â–∏–π (–¥–µ–π—Å—Ç–≤—É—é—â–∏–π) –∞–±–æ–Ω–µ–º–µ–Ω—Ç.'
    await state.set_state(UserEditSelfSubscription.number_of_session_to_add)
    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())


@router.message(StateFilter(UserEditSelfSubscription.number_of_session_to_add))
async def additional_sessions_recieved(message: Message, state: FSMContext):
    number_of_session_to_add = message.text
    if not number_of_session_to_add.isnumeric():
        await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç–∏–π —á–∏—Å–ª–æ–º (1, 3, 5 –∏ —Ç.–¥.)')
        return
    builder = InlineKeyboardBuilder()
    await state.set_state()
    other_settings = await db_requests.get_other_settings()
    payment = Payment.create({
        "amount": {
            "value": f"{int(other_settings.add_session_to_subscribe*int(number_of_session_to_add))}.00",
            "currency": "RUB"
        },
        "confirmation": {
            "type": "redirect",
            "return_url": "https://t.me/Poledance_sando_bot"
        },
        "capture": True,
        "description": f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ {number_of_session_to_add} –∑–∞–Ω—è—Ç–∏–π –≤ –∞–±–æ–Ω–µ–º–µ–Ω—Ç."
        }, uuid.uuid4())
    
    builder = InlineKeyboardBuilder()
    builder.button(text='–û–ø–ª–∞—Ç–∏—Ç—å', url=payment.confirmation.confirmation_url)
    builder.button(text='üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å', callback_data='profile')
    builder.adjust(1)
    message_text = (f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ {number_of_session_to_add} –∑–∞–Ω—è—Ç–∏–π –≤ –∞–±–æ–Ω–µ–º–µ–Ω—Ç –∑–∞ {other_settings.add_session_to_subscribe*int(number_of_session_to_add)} —Ä—É–±–ª–µ–π.\n\n'
                    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–∏ –æ–¥–Ω–æ–≥–æ —á–∞—Å–∞.')
    message_pay = await message.answer(message_text, reply_markup=builder.as_markup())

    for i in range(180):
        payment_status = Payment.find_one(payment.id)
        if payment_status.status == 'succeeded':
            actual_subscription: models.Subscription = await db_requests.get_actual_subscription(message.from_user.id)
            await db_requests.edit_numbers_of_sessions_for_user_subscription(actual_subscription.id, int(number_of_session_to_add) + actual_subscription.number_of_sessions)
            await message_pay.edit_reply_markup(answer_markup='')
            builder = InlineKeyboardBuilder()
            builder.button(text='üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å', callback_data='profile')
            await message.answer(f'üòå –°–ø–∞—Å–∏–±–æ, –æ–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞. {number_of_session_to_add} –∑–∞–Ω—è—Ç–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≤–∞—à —Ç–µ–∫—É—â–∏–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç.', reply_markup=builder.as_markup()) 
            return
        elif payment_status.status == 'canceled':
            break
        else:
            await asyncio.sleep(20)

    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å', callback_data='profile')
    try:
        await message.answer('ü§∑‚Äç‚ôÇÔ∏è –í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É –≤—ã—à–ª–æ –∏–ª–∏ –ø–ª–∞—Ç—ë–∂ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π.', reply_markup=builder.as_markup())
    except:
        '''–ù–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å, –ø–æ—Ç–æ–º—É —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–∞–º –≤—ã—à–µ–ª –∏–∑ –º–µ–Ω—é –æ–ø–ª–∞—Ç—ã –∏ –µ–º—É –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ —Å—Ç–∞—Ä–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã. 
        –ü—Ä–∏ –≤—Ö–æ–¥–µ –∑–∞–Ω–æ–≤–æ –æ–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π —Å—á—ë—Ç'''
        pass

@router.callback_query(F.data == "buy_subscription")
async def buy_subscription_menu(callback: CallbackQuery):
    subscriptions_options = await db_requests.get_all_subscriptions_options()
    builder = InlineKeyboardBuilder()
    message_text = '‚ùóÔ∏è<b>–í–ù–ò–ú–ê–ù–ò–ï!</b> –∞–±–æ–Ω–µ–º–µ–Ω—Ç –¥–µ–π—Å—Ç–≤—É–µ—Ç 30 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–∫—É–ø–∫–∏.\n\n–î–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤:\n\n'
    for i, subscription_option in enumerate(subscriptions_options):
        builder.button(text=f'{subscription_option.number_of_sessions} –∑–∞ {subscription_option.price}', callback_data=f'order_subscription_{subscription_option.id}')
        message_text += f'{i+1}) {subscription_option.number_of_sessions} –∑–∞–Ω—è—Ç–∏–π –∑–∞ {subscription_option.price} —Ä—É–±–ª–µ–π ({subscription_option.price // subscription_option.number_of_sessions} —Ä—É–±. –∑–∞ –∑–∞–Ω—è—Ç–∏–µ)\n'
    builder.button(text='üîô –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', callback_data='profile')
    builder.adjust(1)
    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())


@router.callback_query(F.data == "renew_subscription")
async def buy_subscription_menu(callback: CallbackQuery):
    subscriptions_options = await db_requests.get_all_subscriptions_options()
    other_settings = await db_requests.get_other_settings()
    renewal_discount = other_settings.renewal_discount / 100
    builder = InlineKeyboardBuilder()
    if other_settings.renewal_discount > 0:
        message_text = ('‚ùóÔ∏è<b>–í–ù–ò–ú–ê–ù–ò–ï!</b> –ù–æ–≤—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç –¥–µ–π—Å—Ç–≤—É–µ—Ç <b>30 –¥–Ω–µ–π</b> —Å –º–æ–º–µ–Ω—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞.\n\n'
                        f'üéÅ –°–∫–∏–¥–∫–∞ {other_settings.renewal_discount}% –Ω–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏!\n\n'
                        '–î–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤:\n\n')
    else:
        message_text = ('‚ùóÔ∏è<b>–í–ù–ò–ú–ê–ù–ò–ï!</b> –ù–æ–≤—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç –¥–µ–π—Å—Ç–≤—É–µ—Ç <b>30 –¥–Ω–µ–π</b> —Å –º–æ–º–µ–Ω—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞.\n\n'          
                        '–î–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤:\n\n')
        
    for i, subscription_option in enumerate(subscriptions_options):
        builder.button(text=f'{subscription_option.number_of_sessions} –∑–∞ {int(subscription_option.price-subscription_option.price*renewal_discount)}', callback_data=f'order_renew_subscription_{subscription_option.id}')
        message_text += f'{i+1}) {subscription_option.number_of_sessions} –∑–∞–Ω—è—Ç–∏–π –∑–∞ {f"<s>{subscription_option.price}</s> " if renewal_discount > 0 else ""}<b>{int(subscription_option.price-subscription_option.price*renewal_discount)}</b> —Ä—É–±–ª–µ–π ({int(subscription_option.price-subscription_option.price*renewal_discount) // subscription_option.number_of_sessions} —Ä—É–±. –∑–∞ –∑–∞–Ω—è—Ç–∏–µ)\n'
    builder.button(text='üîô –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', callback_data='profile')
    builder.adjust(1)
    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith('order_renew_subscription_'))
@router.callback_query(F.data.startswith('order_subscription_'))
async def buy_subscription_menu(callback: CallbackQuery):
    if callback.data.__contains__('order_renew_subscription_'):
        subscription_id = callback.data[25:]
        subscription = await db_requests.get_subscription_option(subscription_id)
        other_settings = await db_requests.get_other_settings()
        renewal_discount = other_settings.renewal_discount / 100
        pay_value = int(subscription.price-subscription.price*renewal_discount)
    else:
        subscription_id = callback.data[19:]
        subscription = await db_requests.get_subscription_option(subscription_id)
        pay_value = subscription.price
    user = await db_requests.get_user(callback.from_user.id)
    payment = Payment.create({
        "amount": {
            "value": f"{pay_value}.00",
            "currency": "RUB"
        },
        "confirmation": {
            "type": "redirect",
            "return_url": "https://t.me/Poledance_sando_bot"
        },
        "capture": True,
        "description": f"–û–ø–ª–∞—Ç–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –Ω–∞ {subscription.number_of_sessions} –∑–∞–Ω—è—Ç–∏–π."
        }, uuid.uuid4())
    
    builder = InlineKeyboardBuilder()
    builder.button(text='–û–ø–ª–∞—Ç–∏—Ç—å', url=payment.confirmation.confirmation_url)
    builder.button(text='üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å', callback_data='profile')
    builder.adjust(1)
    message_text = (f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç {subscription.number_of_sessions} –∑–∞–Ω—è—Ç–∏–π –∑–∞ {pay_value} —Ä—É–±–ª–µ–π.\n\n'
                    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ –æ–¥–Ω–æ–≥–æ —á–∞—Å–∞.')
    message_pay = await callback.message.edit_text(message_text, reply_markup=builder.as_markup())

    for i in range(180):
        payment_status = Payment.find_one(payment.id)
        if payment_status.status == 'succeeded':
            await db_requests.add_new_subscription_for_user(callback.from_user.id, subscription_id)
            await message_pay.edit_reply_markup(answer_markup='')
            builder = InlineKeyboardBuilder()
            builder.button(text='üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å', callback_data='profile')
            await callback.message.answer(f'üòå –°–ø–∞—Å–∏–±–æ, –æ–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞, –∞–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ {subscription.number_of_sessions} –∑–∞–Ω—è—Ç–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.', reply_markup=builder.as_markup()) 
            try:
                await bot.send_message(1342357584, f'–£—á–µ–Ω–∏–∫ {user.first_name + " " + user.last_name} ({user.phone_number}) –æ–ø–ª–∞—Ç–∏–ª (–ø—Ä–æ–¥–ª–∏–ª) –∞–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ {subscription.number_of_sessions} –∑–∞–Ω—è—Ç–∏–π.')
            except:
                print(traceback.format_exc())
            return
        elif payment_status.status == 'canceled':
            break
        else:
            await asyncio.sleep(20)

    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å', callback_data='profile')
    try:
        await callback.message.edit_text('ü§∑‚Äç‚ôÇÔ∏è –í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É –≤—ã—à–ª–æ –∏–ª–∏ –ø–ª–∞—Ç—ë–∂ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π.', reply_markup=builder.as_markup())
    except:
        '''–ù–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å, –ø–æ—Ç–æ–º—É —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–∞–º –≤—ã—à–µ–ª –∏–∑ –º–µ–Ω—é –æ–ø–ª–∞—Ç—ã –∏ –µ–º—É –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ —Å—Ç–∞—Ä–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã. 
        –ü—Ä–∏ –≤—Ö–æ–¥–µ –∑–∞–Ω–æ–≤–æ –æ–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π —Å—á—ë—Ç'''
        pass


@router.callback_query(F.data.contains('my_lesson_schedule'))
async def my_lesson_schedule(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    user_enrollments = await db_requests.get_user_enrollments(user_telegram_id=callback.from_user.id,
                                                              date_from=datetime.datetime.utcnow() + datetime.timedelta(hours=7),
                                                              date_to=datetime.datetime.utcnow() + datetime.timedelta(days=100),
                                                              with_single_group=True)
    if user_enrollments:
        message_text = '–í–∞—à–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n\n'
        for training in user_enrollments:
            message_text += (f'<b>–î–∞—Ç–∞:</b> {datetime.datetime.strftime(training.training_date, "%d.%m.%Y %H:%M")}\n'
                            f'<b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {training.direction_of_training}\n'
                            f'<b>–¢—Ä–µ–Ω–µ—Ä:</b> {training.trainer.first_name} {training.trainer.last_name}\n\n')
        
        builder.button(text='üîô –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', callback_data='profile')
        builder.adjust(1)
        await callback.message.edit_text(message_text, reply_markup=builder.as_markup())
    else:
        message_text = '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. üôÖ‚Äç‚ôÄÔ∏è'
        builder.button(text='üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ', callback_data='sign_up_lesson')
        builder.button(text='üîô –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', callback_data='profile')
        builder.adjust(1)
        await callback.message.edit_text(message_text, reply_markup=builder.as_markup())
        
        
@router.callback_query(F.data.contains('history_of_lessons'))
async def history_of_lessons(callback: CallbackQuery):
    user_enrollments = await db_requests.get_user_enrollments(user_telegram_id=callback.from_user.id,
                                                              date_from=datetime.datetime.utcnow() - datetime.timedelta(days=90),
                                                              date_to=datetime.datetime.utcnow() + datetime.timedelta(hours=7))
    if user_enrollments:
        message_text = '–í–∞—à–∏ –ø—Ä–æ—à–µ–¥—à–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n\n'
        for training in user_enrollments:
            message_text += (f'<b>–î–∞—Ç–∞:</b> {datetime.datetime.strftime(training.training_date, "%d.%m.%Y %H:%M")}\n'
                            f'<b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {training.direction_of_training}\n'
                            f'<b>–¢—Ä–µ–Ω–µ—Ä:</b> {training.trainer.first_name} {training.trainer.last_name}\n\n')
    else:
        message_text = '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ—à–µ–¥—à–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.\n\n'

    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', callback_data='profile')
    builder.adjust(1)
    
    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())